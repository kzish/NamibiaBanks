// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedModels;

namespace wb6.Migrations
{
    [DbContext(typeof(dbContext))]
    partial class dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("SharedModels.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("SharedModels.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("SharedModels.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<ulong>("EmailConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("LockoutEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<ulong>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<ulong>("TwoFactorEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles");
                });

            modelBuilder.Entity("SharedModels.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8mb3_general_ci")
                        .HasCharSet("utf8mb3");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("SharedModels.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("SharedModels.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("login");
                });

            modelBuilder.Entity("SharedModels.Aspnetroleclaim", b =>
                {
                    b.HasOne("SharedModels.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserclaim", b =>
                {
                    b.HasOne("SharedModels.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserlogin", b =>
                {
                    b.HasOne("SharedModels.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.Aspnetuserrole", b =>
                {
                    b.HasOne("SharedModels.Aspnetrole", "Role")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.Aspnetuser", "User")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.Aspnetusertoken", b =>
                {
                    b.HasOne("SharedModels.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");

                    b.Navigation("Aspnetuserroles");
                });

            modelBuilder.Entity("SharedModels.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetuserroles");

                    b.Navigation("Aspnetusertokens");
                });
#pragma warning restore 612, 618
        }
    }
}
